version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroyed env: << parameters.workflow_id >> "
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/ErrfXVe6mBUGieGNvNGeJz/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
jobs:
  # build front end
  build-frontend:
    docker:
      - image: circleci/node:16.3.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  # build back end
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  # Test frontend
  test-frontend:
    docker:
      - image: circleci/node:16.3.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Test front end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend
  
  # Test backend
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Test back end
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend
  
  # Analyze front end
  scan-frontend:
    docker:
      - image: circleci/node:16.3.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Scan front end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: scan-frontend
  # Analyze back end
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend

  # Create infra
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Create inventory file
          command: |
            touch ~/inventory.txt
            echo [all] > ~/inventory.txt
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> ~/inventory.txt
      - run:
          name: Verify inventory file
          command: |
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
    
  # Server configuration
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # - run: touch ~/inventory.txt
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["a0:c7:6c:07:e2:e9:04:85:e8:ee:2e:23:b3:35:bd:ca"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run: cat ~/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            export ANSIBLE_RECORD_HOST_KEYS=False
            ansible-playbook -i ~/inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  # Migrate DB
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: |
            cd backend
            echo ENVIROMENT=$ENVIROMENT > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/ErrfXVe6mBUGieGNvNGeJz/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d "1"
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  # Deploy frontend
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            yum -y install tar 
            yum -y install gzip 
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  # Deploy backend
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["a0:c7:6c:07:e2:e9:04:85:e8:ee:2e:23:b3:35:bd:ca"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt update -y && sudo apt upgrade -y
            sudo apt install -y software-properties-common apt-utils
            sudo apt -y install tar gzip unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Install Ansible
          command: |
            sudo apt update -y && sudo apt upgrade -y
            sudo apt install -y software-properties-common
            sudo apt update
            sudo apt install -y ansible
      - run:
          name: Prepare Deploy backend
          command: |
            cd backend
            echo ENVIROMENT=$ENVIROMENT > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir .circleci/ansible/roles/deploy/files
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt"
            cat ~/inventory.txt
            ansible-playbook -i ~/inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
    
  smoke-test:
    docker:
      - image: python:3.9-alpine3.14
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  cloudfront-update:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt-get install -y curl tar gzip
            pip3 install awscli
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
            echo OldWorkflowID: "${OldWorkflowID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - persist_to_workspace:
          root: ~/
          paths:
            - OldWorkflowID.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              yum -y install tar gzip
        - attach_workspace:
            at: ~/
        - run:
            name: Remove old stacks
            command: |
              # cat ~/OldWorkflowID.txt
              # OldWorkflowID=$(cat ~/OldWorkflowID.txt)
              # echo OldWorkflowID: "${OldWorkflowID}"
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
              echo Stacks: "${STACKS[@]}"
              for stackitem in ${STACKS[@]}
              do
                echo $stackitem
                if [[ ! $stackitem =~ .*"${CIRCLE_WORKFLOW_ID:0:7}".* ]]
                then
                  echo "-------------------"
                  echo $stackitem
                #   aws s3 rm s3://${OldWorkflowID} --recursive
                #   aws s3api delete-bucket --bucket ${OldWorkflowID} --region us-east-1
                #   aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID: -7}"
                #   aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID: -7}"
                else
                  echo "--------------- CANNOT CLEAN ---------------"
                fi
              done
        - destroy-environment:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
        - revert-migrations:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
workflows:
  default:
    jobs:
      # - build-frontend:
      #     context: slack-secrets
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: master
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      - cleanup
          # requires: [cloudfront-update]